---
import Headline from '~/components/ui/Headline.astro';
import WidgetWrapper from '~/components/ui/WidgetWrapper.astro';
import Button from '~/components/ui/Button.astro';
import Image from '~/components/common/Image.astro';

import type { Testimonials } from '~/types';

const {
  title = '',
  testimonials = [],
  callToAction,

  id,
  isDark = false,
  classes = {},
  bg = await Astro.slots.render('bg'),
} = Astro.props as Testimonials;
---

<style>
  .grid {
    margin: 0 12px;
    display: flex;
    position: relative;
  }

  .grid > div {
    scroll-snap-align: start;
    transition: transform 0.5s ease-in-out;
  }

  /* .card-article:before,
  .card-article:after {
    position: absolute;
    top: 0;
    width: 50px;
    height: 90%;
    content: '';
    z-index: 2;
  }

  .card-article:before {
    left: 24px;
    background: linear-gradient(to left, rgba(255, 255, 255, 0), white);
  }

  .card-article:after {
    right: 24px;
    background: linear-gradient(to right, rgba(255, 255, 255, 0), white);
  } */

  hr {
    width: 300px;
  }

  @media (max-width: 768px) {
    hr {
      width: 200px;
    }

    .grid {
      margin: 0 10px;
      gap: 10px;
    }
    /* .card-article:before {
      left: 16px;
    }

    .card-article:after {
      right: 16px;
    } */
  }

  @keyframes slide {
    0% {
      transform: translateX(0);
    }
    100% {
      transform: translateX(calc(-100%));
    }
  }

  .galeri {
    white-space: nowrap;
    overflow: hidden;
    padding: 60px;
  }

  .scroll {
    display: inline-block;
    animation: slide 15s linear infinite;
  }
</style>

<WidgetWrapper id={id} isDark={isDark} containerClass={`card_container ${classes?.container ?? ''}`} bg={bg}>
  <div class="card-content">
    <div class="card-article">
      <Headline title={title} />

      <div class="galeri">
        <div class="scroll">
          <div class="grid gap-6">
            {
              testimonials &&
                testimonials.map(({ title, testimonial, name, image }) => (
                  <div class="flex flex-col w-300 bg-white/50 p-4 md:p-6 rounded-md shadow-xl dark:shadow-none dark:border dark:border-slate-600">
                    {title && <h2 class="text-lg font-medium leading-6 pb-4">{title}</h2>}
                    {testimonial && (
                      <div class="justify-center">
                        {image && (
                          <div class="h-300 w-400">
                            {typeof image === 'string' ? (
                              <Fragment set:html={image} />
                            ) : (
                              <Image
                                class="h-300 w-400"
                                width={300}
                                height={300}
                                widths={[250, 768]}
                                {...(image as any)}
                              />
                            )}
                          </div>
                        )}
                      </div>
                    )}

                    <hr class="border-slate-200 dark:border-slate-600 my-4" />

                    <div>{name && <p class="text-lg text-center font-semibold">{name}</p>}</div>
                  </div>
                ))
            }
          </div>
        </div>
        <div class="scroll">
          <div class="grid gap-6">
            {
              testimonials &&
                testimonials.map(({ title, testimonial, name, image }) => (
                  <div class="flex flex-col w-300 bg-white/50 p-4 md:p-6 rounded-md shadow-xl dark:shadow-none dark:border dark:border-slate-600">
                    {title && <h2 class="text-lg font-medium leading-6 pb-4">{title}</h2>}
                    {testimonial && (
                      <div class="flex justify-center">
                        {image && (
                          <div class="h-300 w-400">
                            {typeof image === 'string' ? (
                              <Fragment set:html={image} />
                            ) : (
                              <Image
                                class="h-300 w-400"
                                width={300}
                                height={300}
                                widths={[250, 768]}
                                {...(image as any)}
                              />
                            )}
                          </div>
                        )}
                      </div>
                    )}

                    <hr class="border-slate-200 dark:border-slate-600 my-4" />

                    <div class="grow ml-3 rtl:ml-0 rtl:mr-3">
                      {name && <p class="text-lg text-center font-semibold">{name}</p>}
                    </div>
                  </div>
                ))
            }
          </div>
        </div>
      </div>

      {
        callToAction && (
          <div class="flex justify-center mx-auto w-fit mt-8 md:mt-12 font-medium">
            <Button {...callToAction} />
          </div>
        )
      }
    </div>
  </div>
</WidgetWrapper>
